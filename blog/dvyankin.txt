(Thunk'n)===========================

I shoot video on my DSR-300 video camera frequently, and have to get all that video goodness of my tapes somehow, so here are some of the methods I use on linux to do so. I'm very much into late-90s/early 00's recorders because they're so durable, and the mechatronics are so intricate yet robust. Also I just like the PLONG my mitsubishi diamondtron makes when I turn it on to watch a tape. So glad I saved it from the skip along with my TOA speakers. In the future though, I hope to get a DSR-50 and some lighter-weight Sony DVCAM-capable camcorders so I can fit them on my gimbal without getting a heaping helping of back pain. If any of you have video equipment and live in the Boston-Cambridge area, shoot me some electronic mail, I'd love to take your camera/VTR off your hands. Hope these scripts help ya.

(dooin)===========================

This will help you get a dv tape out with firewire(you'll have to install `ffmpeg, dgrab` wherever free software is sold.

(dvyank.sh)
"""
dvgrab --autosplit --format dv2 dvgrab-
touch dvg-files.txt
find -name "dvgrab-*" -exec echo {} >> dvg-files.txt \;
ffmpeg -f concat -safe 0 -i dvg-files.txt -c copy dvg-out-lossless.avi
ffmpeg -i dvg-out-lossless.avi -deinterlace -vcodec h264 -acodec mp3 dvg-compressed-out.mp4
rm dvgrab-*
rm dvg-files.txt
"""

However, I generally prefer my elgato video capture usb with S-video and RCA audio to 3.5mm for audio capture. The elgato shows up as a video input(usually /dev/video2) and the 3.5mm shows up as a microphone(I custom soldered the cable). However, I probably will use the DV script once I get a proper VTR like the DSr-50, as using the only firewire-dv implement I can get my hands on(a lowly ZR-10 I used as a kid) cannot rip the DVCAM format tapes from my DSR-300 procam, as the DVCAM(bad name I know, but that's the name) standart uses regular minidv tapes, but at a much higher speed to improve quality.

Sometimes DV can get corrupted, especially when I find old zipdisks of it. This retro python script could be your medicine:

(salvagedv.py)
"""
#!/usr/bin/env python
"""
This utility will search *any* file and look for what *appears* to be a DV
video frames and copy them into a new Raw DV file.
Written by Dan Dennedy <dan@dennedy.org>
"""

import sys

def is_dv_1(s):\
  return ord(s[0]) == 0x1f and ord(s[1]) == 0x07 and ord(s[2]) == 0x00

def is_dv_2(s):
  return ord(s[1]) == 0x07 and ord(s[2]) == 0x00 and ord(s[3]) == 0xff

def is_pal(s):
  return (ord(s[3]) & 0x80)

if len(sys.argv) < 3 or sys.argv[1][0] == '-':
  print 'Usage', sys.argv[0], '<input-file> <output-file>'
  sys.exit(0)

inputFilename = sys.argv[1]
outputFilename = sys.argv[2]
print 'Salvaging from', inputFilename, 'into', outputFilename

pos = 0
count = 0
input = open(inputFilename, 'rb')
output = open(outputFilename, 'wb')

while True:
  input.seek(pos)
  dif1 = input.read(480)
  if not dif1:
    break
  if is_dv_1(dif1):
    dif2 = input.read(480)
    if not dif2:
      break
    if is_dv_2(dif2):
      size = (is_pal(dif1) and (480 * 300) or (480 * 250))
      frame = input.read(size - 480 * 2)
      if frame:
        output.write(dif1)
        output.write(dif2)
        output.write(frame)
        count += 1
        if count % (size/4800) == 0:
          print '\rSalvaging frame', count,
          sys.stdout.flush()
        pos += size
      else:
        break
    else:
      pos += 1
  else:
    pos += 1

input.close()
output.close()
print '\nSalvaging frame %d. Done.' % (count,)
sys.exit(0)
"""
